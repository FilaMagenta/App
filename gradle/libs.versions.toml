[versions]
agp = "8.1.2"
android-minSdk = "24"
android-compileSdk = "34"
android-targetSdk = "34"
androidx-activityCompose = "1.8.0"
androidx-appCompat = "1.6.1"
androidx-camera = "1.2.3"
androidx-compose-runtime = "1.5.4"
androidx-core-ktx = "1.12.0"
androidx-lifecycle = "2.6.2"
androidx-test-junit = "1.1.5"
androidx-espresso-core = "3.5.1"
build-konfig = "0.14.0"
compose = "1.5.4"
compose-material3 = "1.1.2"
compose-plugin = "1.5.10"
compose-compiler = "1.5.3"
desugar-jdk-libs = "2.0.3"
junit = "4.13.2"
kotlin = "1.9.20"
kotlinx-coroutines = "1.7.3"
kotlinx-datetime = "0.4.1"
kotlinx-serialization = "1.6.0"
ktor = "2.3.5"
libsodium = "0.9.0"
mlkit = "17.2.0"
multiplatform-settings = "1.1.0"
multiplatform-viewmodel = "0.0.3"
moko-resources = "0.23.0"
moko-graphics = "0.9.0"
napier = "2.6.1"
play-appUpdate = "2.1.0"
qrcode = "3.3.0"
sentry-android = "6.33.0"
sentry-android-plugin = "3.14.0"
sqldelight = "2.0.0"

[libraries]
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
androidx-appcompat = { module = "androidx.appcompat:appcompat", version.ref = "androidx-appCompat" }
androidx-camera-camera2 = { module = "androidx.camera:camera-camera2", version.ref = "androidx-camera" }
androidx-camera-lifecycle = { module = "androidx.camera:camera-lifecycle", version.ref = "androidx-camera" }
androidx-camera-view = { module = "androidx.camera:camera-view", version.ref = "androidx-camera" }
androidx-compose-runtime-livedata = { module = "androidx.compose.runtime:runtime-livedata", version.ref = "androidx-compose-runtime" }
androidx-lifecycle-viewmodel = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "androidx-lifecycle" }
androidx-lifecycle-viewmodel-compose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "androidx-lifecycle" }
compose-material3-windowSizeClass = { module = "androidx.compose.material3:material3-window-size-class", version.ref = "compose-material3" }
desugar-jdkLibs = { module = "com.android.tools:desugar_jdk_libs", version.ref = "desugar_jdk_libs" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlinx-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinx-coroutines" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }
kotlinx-serialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
ktor-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-contentNegotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-auth = { module = "io.ktor:ktor-client-auth", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-serialization-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
libsodium = { module = "com.ionspin.kotlin:multiplatform-crypto-libsodium-bindings", version.ref = "libsodium" }
mlkit-barcode = { module = "com.google.mlkit:barcode-scanning", version.ref = "mlkit" }
multiplatform-settings = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatform-settings" }
multiplatform-viewmodel = { module = "com.doublesymmetry:multiplatform-viewmodel", version.ref = "multiplatform-viewmodel" }
moko-resources = { module = "dev.icerock.moko:resources", version.ref = "moko-resources" }
moko-resourcescompose = { module = "dev.icerock.moko:resources-compose", version.ref = "moko-resources" }
moko-graphics = { module = "dev.icerock.moko:graphics", version.ref = "moko-graphics" }
moko-resourcestest = { module = "dev.icerock.moko:resources-test", version.ref = "moko-resources" }
napier = { module = "io.github.aakira:napier", version.ref = "napier" }
play-appUpdate-core = { module = "com.google.android.play:app-update", version.ref = "play-appUpdate" }
play-appUpdate-ktx = { module = "com.google.android.play:app-update-ktx", version.ref = "play-appUpdate" }
qrcode-android = { module = "io.github.g0dkar:qrcode-kotlin-android", version.ref = "qrcode" }
sentry-android = { module = "io.sentry:sentry-android", version.ref = "sentry-android" }
sentry-compose = { module = "io.sentry:sentry-compose-android", version.ref = "sentry-android" }
sqldelight-android = { module = "app.cash.sqldelight:android-driver", version.ref = "sqldelight" }
sqldelight-native = { module = "app.cash.sqldelight:native-driver", version.ref = "sqldelight" }
sqldelight-primitiveAdapters = { module = "app.cash.sqldelight:primitive-adapters", version.ref = "sqldelight" }
sqldelight-coroutines = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqldelight" }

[plugins]
androidApplication = { id = "com.android.application", version.ref = "agp" }
buildKonfig = { id = "com.codingfeline.buildkonfig", version.ref = "build-konfig" }
jetbrainsCompose = { id = "org.jetbrains.compose", version.ref = "compose-plugin" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlinSerialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
mokoResources = { id = "dev.icerock.mobile.multiplatform-resources", version.ref = "moko-resources" }
sentryAndroid = { id = "io.sentry.android.gradle", version.ref = "sentry-android-plugin" }
sqldelight = { id = "app.cash.sqldelight", version.ref = "sqldelight" }